name: Build Android JRE (aarch64, JDK 17)

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-android-jre.yml'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config gawk gperf make cmake \
            zip unzip curl xz-utils wget python2 git ccache zlib1g-dev
          # Provide Python 2 headers/libs for any script that expects them
          sudo apt-get install -y libpython2.7-dev || sudo apt-get install -y python2-dev || true

      - name: Download NDK r10e (retry + validate)
        run: |
          set -euxo pipefail
          cd "$RUNNER_TEMP"
          urls=(
            "https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip"
            "https://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.zip"
            "https://archive.org/download/android-ndk-r10e/android-ndk-r10e-linux-x86_64.zip"
          )
          success=0
          for u in "${urls[@]}"; do
            echo "Trying $u"
            rm -f ndk.zip || true
            if curl -fL --retry 5 --retry-connrefused --retry-delay 2 -o ndk.zip "$u"; then
              if unzip -tq ndk.zip > /dev/null 2>&1; then
                echo "Valid zip from $u"
                success=1
                break
              fi
            fi
          done
          if [ "$success" -ne 1 ]; then
            echo "Failed to download a valid NDK r10e archive from all sources" >&2
            exit 1
          fi
          unzip -q ndk.zip
          echo "ANDROID_NDK_HOME=$RUNNER_TEMP/android-ndk-r10e" >> "$GITHUB_ENV"

      - name: Clone Android OpenJDK build scripts
        run: |
          git clone --depth=1 https://github.com/PojavLauncherTeam/android-openjdk-build-multiarch.git build-android-jdk

      - name: Prepare NDK path expected by scripts + force python2 + provide python headers/libs
        run: |
          set -euxo pipefail
          # Place NDK where the scripts expect it
          rm -rf build-android-jdk/android-ndk-r10e
          ln -s "$ANDROID_NDK_HOME" build-android-jdk/android-ndk-r10e

          # Ensure the old NDK toolchain script runs with python2
          for f in "$ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh" "build-android-jdk/android-ndk-r10e/build/tools/make-standalone-toolchain.sh"; do
            if [ -f "$f" ]; then
              sed -i 's@/usr/bin/env python@/usr/bin/env python2@' "$f" || true
              sed -i 's/\<python\>/python2/g' "$f" || true
              chmod +x "$f"
            fi
          done

          # Some repo revisions try to copy python headers/libs from NDK prebuilt host path.
          # Provide them by linking system python2.7 headers/libs so those copy steps don't fail.
          host_prebuilt="$ANDROID_NDK_HOME/prebuilt/linux-x86_64"
          sudo mkdir -p "$host_prebuilt/include" "$host_prebuilt/lib"
          if [ -d /usr/include/python2.7 ]; then
            sudo ln -sfn /usr/include/python2.7 "$host_prebuilt/include/python2.7"
            # Some scripts erroneously look for "python22.7" (concatenation bug). Point it to python2.7.
            (cd "$host_prebuilt/include" && sudo ln -sfn python2.7 python22.7)
          else
            sudo mkdir -p "$host_prebuilt/include/python2.7" "$host_prebuilt/include/python22.7"
          fi
          # Link the shared lib if available; otherwise create a dummy to satisfy copy checks
          if [ -f /usr/lib/x86_64-linux-gnu/libpython2.7.so ]; then
            sudo ln -sfn /usr/lib/x86_64-linux-gnu/libpython2.7.so "$host_prebuilt/lib/libpython2.7.so"
          else
            sudo touch "$host_prebuilt/lib/libpython2.7.so"
          fi

      - name: Build JDK 17 (aarch64)
        working-directory: build-android-jdk
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          TARGET: aarch64-linux-android
          TARGET_JDK: aarch64
          ANDROID_API_LEVEL: 21
          JDK_DEBUG_LEVEL: release
          JVM_VARIANTS: server
          BUILD_FREETYPE_VERSION: 2.10.4
          JDK_MAJOR: 17
          PYTHON: /usr/bin/python2
        run: |
          set -euxo pipefail
          # Do NOT run ./extractndk.sh (we already downloaded NDK and linked it)
          ./maketoolchain.sh
          ./getlibs.sh
          ./buildlibs.sh
          ./clonejdk.sh
          ./buildjdk.sh
          ./removejdkdebuginfo.sh
          ./tarjdk.sh
          ls -lah out || true
          ls -lah images || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jre-aarch64-jdk17
          path: |
            build-android-jdk/out/**
            build-android-jdk/images/**
            
